import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.RoundRectangle2D;
import java.util.regex.Pattern;

// Custom JPanel for rounded edges
class RoundedPanel extends JPanel {
    private int cornerRadius;

    public RoundedPanel(int radius) {
        this.cornerRadius = radius;
        setOpaque(false);
        setBackground(Color.WHITE);
    }

    @Override
    protected void paintComponent(Graphics g) {
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setColor(getBackground());
        g2.fill(new RoundRectangle2D.Float(0, 0, getWidth(), getHeight(), cornerRadius, cornerRadius));
        g2.dispose();
        super.paintComponent(g);
    }
}

public class PasswordChecker {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Account Creation");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(450, 450); // Increased window size
        frame.setLayout(new GridBagLayout());
        frame.getContentPane().setBackground(Color.GRAY); // Background color

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.gridx = 0;
        gbc.anchor = GridBagConstraints.CENTER;

        // Title Panel
        JPanel titlePanel = new JPanel();
        titlePanel.setBackground(Color.WHITE);
        JLabel titleLabel = new JLabel("Java GUI using AWT");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        titlePanel.add(titleLabel);
        gbc.gridy = 0;
        frame.add(titlePanel, gbc);

        // Input Panel with Rounded Edges
        RoundedPanel inputPanel = new RoundedPanel(30);
        inputPanel.setLayout(new GridBagLayout());
        inputPanel.setBackground(Color.WHITE);

        GridBagConstraints panelGbc = new GridBagConstraints();
        panelGbc.insets = new Insets(5, 5, 5, 5);
        panelGbc.gridx = 0;
        panelGbc.anchor = GridBagConstraints.WEST;

        JLabel contactLabel = new JLabel("Enter email or phone number:");
        panelGbc.gridy = 0;
        inputPanel.add(contactLabel, panelGbc);

        JTextField contactField = new JTextField(25); // Increased length
        panelGbc.gridy = 1;
        inputPanel.add(contactField, panelGbc);

        JLabel passwordLabel = new JLabel("Enter the password:");
        panelGbc.gridy = 2;
        inputPanel.add(passwordLabel, panelGbc);

        JPasswordField passwordField = new JPasswordField(25); // Increased length
        panelGbc.gridy = 3;
        inputPanel.add(passwordField, panelGbc);

        JLabel confirmPasswordLabel = new JLabel("Confirm password:");
        panelGbc.gridy = 4;
        inputPanel.add(confirmPasswordLabel, panelGbc);

        JPasswordField confirmPasswordField = new JPasswordField(25); // Increased length
        panelGbc.gridy = 5;
        inputPanel.add(confirmPasswordField, panelGbc);

        JButton checkButton = new JButton("Create Account");
        panelGbc.gridy = 6;
        inputPanel.add(checkButton, panelGbc);

        JLabel resultLabel = new JLabel();
        panelGbc.gridy = 7;
        inputPanel.add(resultLabel, panelGbc);

        gbc.gridy = 1;
        frame.add(inputPanel, gbc);

        checkButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String contact = contactField.getText().trim();
                String password = new String(passwordField.getPassword());
                String confirmPassword = new String(confirmPasswordField.getPassword());

                if (contact.isEmpty()) {
                    resultLabel.setText("Please enter an email or phone number.");
                    return;
                }

                if (!isValidEmail(contact) && !isValidPhoneNumber(contact)) {
                    resultLabel.setText("Invalid email or phone number.");
                    return;
                }

                if (!isStrongPassword(password)) {
                    resultLabel.setText("<html>Password must include:<br>- At least 8 characters<br>- One uppercase letter<br>- One number<br>- One special character</html>");
                    return;
                }

                if (!password.equals(confirmPassword)) {
                    resultLabel.setText("Passwords do not match.");
                    return;
                }

                JOptionPane.showMessageDialog(frame, "Password saved.", "Success",
                        JOptionPane.INFORMATION_MESSAGE, new ImageIcon("thumbs_up.png"));
                JOptionPane.showMessageDialog(frame, "Account created successfully!", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
                resultLabel.setText("Account created successfully!");
            }
        });

        frame.setVisible(true);
    }

    private static boolean isStrongPassword(String password) {
        if (password.length() < 8) return false;

        boolean hasUpper = false, hasDigit = false, hasSpecial = false;

        for (char ch : password.toCharArray()) {
            if (Character.isUpperCase(ch)) hasUpper = true;
            if (Character.isDigit(ch)) hasDigit = true;
            if (!Character.isLetterOrDigit(ch)) hasSpecial = true;
        }

        return hasUpper && hasDigit && hasSpecial;
    }

    private static boolean isValidEmail(String email) {
        String emailRegex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";
        return Pattern.matches(emailRegex, email);
    }

    private static boolean isValidPhoneNumber(String phone) {
        String phoneRegex = "^\\d{10}$";
        return Pattern.matches(phoneRegex, phone);
    }
}
